package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math"
	"net/http"
	"os"
	"sort"
	"sync"
	"time"
)

type Restorans struct {
	GlobalId string     `json:"global_id"`
	ID string     		`json:"ID"`
	Name string     	`json:"Name"`
	IsNetObject string   `json:"IsNetObject"`
	OperatingCompany string     `json:"OperatingCompany"`
	TypeObject string     `json:"TypeObject"`
	AdmArea string     `json:"AdmArea"`
	Longitude_WGS84 interface{}     `json:"Longitude_WGS84"`
	Latitude_WGS84 interface{}    `json:"Latitude_WGS84"`
	Path float64

}

type restArray [] Restorans


func readJSON(filepath string) (array restArray){

	jsonFile, _ := os.Open(filepath)
	defer jsonFile.Close()

	byteValue, _ := ioutil.ReadAll(jsonFile)
	json.Unmarshal(byteValue, &array)

	return array
}

func Path(Longitude float64, Latitude float64, r Restorans) float64 {
	var f float64
	var w float64
	var h float64
	w = r.Latitude_WGS84.(float64)
	h = r.Longitude_WGS84.(float64)

	f =  math.Sqrt(math.Pow(Latitude - w, 2) + math.Pow(Longitude - h, 2))
	return  f
}

func ArrayDelimeter(maxLen int, array  restArray) ([] restArray) {
	x := len(array)
	destArray := [] restArray{}
	if (x>maxLen){
		res1:= ArrayDelimeter(maxLen, array[:(x/2)])
		res2:= ArrayDelimeter(maxLen, array[(x/2):])
		for i:=0; i<len(res1);i++ {
			destArray = append(destArray, res1[i])
		}
		for i:=0; i<len(res2);i++ {
			destArray = append(destArray, res2[i])
		}

	} else {
		destArray = append(destArray, array)
	}
	return destArray
}

func main() {

	handler := http.NewServeMux()

	// Регистрация pprof-обработчиков
	//pp.HandleFunc("/debug/pprof/", pprof.Index)
	//pp.HandleFunc("/debug/pprof/cmdline", pprof.Cmdline)
	//pp.HandleFunc("/debug/pprof/profile", pprof.Profile)
	//pp.HandleFunc("/debug/pprof/symbol", pprof.Symbol)
	//pp.HandleFunc("/debug/pprof/trace", pprof.Trace)
	//
	////
	// Обработчик сообщений от Каше
	//
	handler.HandleFunc("/index", func(w http.ResponseWriter, r *http.Request) {
		

		lat := 45.23456
		lon := 56.5676
		arr := ArrayDelimeter(100, readJSON("data.json"))
		fmt.Println(lat)
		fmt.Println(lon)
		fmt.Println(arr)

		var wg sync.WaitGroup
		Chanel := make(chan restArray, 10000)
		for item := range arr {
			wg.Add(1)
			go func (array restArray, lat float64, lon float64, group *sync.WaitGroup, c chan restArray) {
				tempArray := make(restArray,0)
				for item := range array {
					pathToRest := Path(lon, lat, array[item])
					tmpVal:= array[item] //текущий ресторан
					tmpVal.Path = pathToRest
					tempArray = append(tempArray, tmpVal)
				}
				sort.SliceStable(tempArray, func(i, j int) bool { return tempArray[i].Path < tempArray[j].Path})

				c <- tempArray[:3]

				defer wg.Done()
			} (arr[item], lat, lon, &wg, Chanel)
		}
		wg.Wait()
		close(Chanel)

		tempArray := make(restArray,0) //полуотсортированный массив ресторанов
		for {
			values, ok := <- Chanel
			if !ok {
				break
			}
			if ok {
				for i :=range values{
					tempArray = append(tempArray, values[i])
				}
			}
		}

		sort.SliceStable(tempArray, func(i, j int) bool { return tempArray[i].Path < tempArray[j].Path})

		for _, value := range tempArray[:3] {
			fmt.Println(value)
		}

		w.WriteHeader(http.StatusOK)
		r.Close = true
	}) // each request calls handler


	s := &http.Server{
		ReadHeaderTimeout: 30 * time.Second,
		ReadTimeout:       30 * time.Second,
		WriteTimeout:      30 * time.Second,
		Handler:           pp,
		Addr:              ":3000",
	}


	log.Println(s.ListenAndServe())



}
